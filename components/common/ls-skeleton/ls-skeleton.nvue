<template>
	<view>
		<view v-if="loading" :class="'ls_skeleton_wrap scene_' + scene">
			<block v-if="needHeader">
				<view class="fake-header">

				</view>
			</block>
			<block v-for="(item, index) in elements" :key="index">
				<!-- 横向并列布局 -->
				<view class="ls_skeleton_box" v-if="item.type=='flex'">
					<view class="ls_skeleton-group" >
						
						<view :class="[inner.clas, index2>0?'ls_ml':'']" v-for="(inner, index2) in item.children" :key="index2">
							<view :class="[el.clas, el.clas=='ls_circle'?'':style, animateClass]" v-for="(el, index3) in inner.eles" :key="index3" ref="skeleton"></view>
						</view>
					</view>
				</view>
				
				<!-- 扩展模板：新闻资讯模板 -->
				<!-- ps 自定义扩展说明： -->
				<!-- 如果你需要自定义模板，可以参照这个news的写法，增加一个skeleton配置类型，编写布局和样式就可以了 -->
				<!-- 注意事项：为了保证骨架效果和笔记效果的一致，扩展时，在你希望实际展示在页面中的元素上加上 :class="[style, animateClass]" 和 ref="skeleton" -->
				<view class="ls_skeleton-group" v-else-if="item.type=='news'">
					<view class="ls_news_img" :class="[style, animateClass]" ref="skeleton"></view>
					<view class="ls_news">
						<view class="ls_line" :class="[style, animateClass]" ref="skeleton"></view>
						<view class="ls_news_user" :class="[style, animateClass]" ref="skeleton"></view>
						<view class="ls_news_time" :class="[style, animateClass]" ref="skeleton"></view>
					</view>
				</view>
				<!-- 垂直高度站位 -->
				<view :style="{height: item.height+'rpx'}" v-else-if="item.type=='space'" class="ls_skeleton_space"></view>
				<view :style="{height: (-item.height)+'rpx'}" v-else-if="item.type=='space-inner'" class="ls_skeleton_space_inner"></view>
				<view v-else-if="item.type=='post-gap'" class="ls_skeleton_post_gap"></view>
				<view v-else-if="item.type=='page-gap'" class="ls_skeleton_page_gap"></view>
				<!-- 其他基本单位  line  card circle 等 -->
				<view :class="'ls_skeleton_box single-' + item.clas" v-else>
					<view class="common-page-width">
						<view :class="[item.clas, item.clas=='ls_circle'?'':style, animateClass]" ref="skeleton"></view>
					</view>
				</view>

			</block>
		</view>
		<view v-else>
			<slot />
		</view>
	</view>
</template>

<script>
	import {getElCountsAndLayout, getElCounts} from './util';
	// #ifdef APP-NVUE
	const animationActuator = weex.requireModule('animation');
	let interval;
	// #endif
	
	/**
	 * ls-skeleton 骨架屏
	 * @description 可自定义内容的骨架屏
	 * @property {Boolean} loading 是否显示骨架（默认：否）
	 * @property {Boolean} round 是否圆角骨架风格（默认：否）
	 * @property {Boolean} animate 是否开启动画效果（默认：是）
	 * @property {Array} skeleton 骨架内容 （段落：line|line-sm|line-lg| 卡片：card|card-sm|card-lg| 圆：circle|circle-sm|circle-lg 正方形：square|square-sm|square-lg）个数标识符*  横向并列连接标识符+
	 * @example 
	 * <ls-skeleton :skeleton="skeleton" :loading="loading">
	 * 	<view>好的，页面加载完了</view>
	 * </ls-skeleton>
	 */
	export default {
		name: 'ls-skeleton',
		props: {
			// 是否显示骨架
			loading: {
				type: Boolean,
				default: true
			},
			// 是否圆角骨架风格
			round: {
				type: Boolean,
				default: false
			},
			// 骨架内容 特殊符号说明 [*代表个数 例如：line*3 意思是3个行] [+代表横向并列排列连接  例如：circ+line 意思是左侧一个圆右侧一个行] [纯数字 代表垂直间隔 例如：40 代表40前后的两个元素之间有40rpx高度的间隔]
			skeleton: {
				type: Array,
				default: () => []
			},
			// 是否开启动画效果
			animate: {
				type: Boolean,
				default: true
			},
			needHeader: {
				type: Boolean,
				default: false
			},
			scene: {
				type: Number,
				default: 0
			},
		},
		data() {
			return {
				elements: []
			}
		},
		computed: {
			animateClass() {
				let that = this;
				if(that.$store.state.theme == 'black'){
					return this.animate ? 'ls_animation_black' : 'ls_static';
				}else{
					return this.animate ? 'ls_animation' : 'ls_static';
				}
			},
			style() {
				if (this.round) {
					return 'ls_round';
				}
				return 'ls_radius';
			}
		},
		watch: {
			// 开始loading时，加载动画
			loading: {
				handler: function (newVal, oldVal) {
					// #ifdef APP-NVUE
					if (newVal && this.animate) {
						this.createAnimation();
					}
					// #endif
				},
				immediate: true,
			},
			skeleton: {
			    handler: function () {
					this.init();
					// #ifdef APP-NVUE
					if (this.loading && this.animate) {
						setTimeout(() => {
							this.createAnimation();
						}, 40);
					}
					// #endif
			    },
			    immediate: true,
			    deep: true
			}
		},
		methods: {
			init() {
				let elements = [];
				let elClass;
				this.skeleton.forEach(el => {
					if (typeof(el) === 'string') {
						if(el == 'post-gap'){
							elements.push({
								type: 'post-gap',
								height: el
							});
						}else if(el == 'page-gap'){
							elements.push({
								type: 'page-gap',
								height: el
							});
						}else{
							if (el.indexOf("+") > -1) {
								let group = el.split("+");
								let children = [];
								group.forEach(els => {
									children.push(getElCountsAndLayout(els));
								});
								elements.push({
									type: 'flex',
									children: children
								});
							} else {
								elClass = getElCounts(el);
								elements = elements.concat(elClass);
							}
						}
						
					} else if (typeof(el) === 'number') {
						if(parseInt(el) > 0){
							elements.push({
								type: 'space',
								height: el
							});
						}else{
							elements.push({
								type: 'space-inner',
								height: el
							});
						}
					} else {
						console.warn("[ls-skeleton]: 参数格式包含了不符合规范的内容");
					}
				});
				this.elements = [...elements];
			},
			createAnimation() {
				let background = '#e6e6e6';
				clearInterval(interval);
				interval = setInterval(() => {
					background = background === '#e6e6e6' ? '#e3e3e3' : '#e6e6e6';
					this.executeAnimation(background);
				}, 1000);
			},
			executeAnimation(background) {
				// loading结束之后，移除计时器，动画不再执行
				if (!this.loading) {
					clearInterval(interval);
					return;
				}
				this.$refs.skeleton.forEach(item => {
					animationActuator.transition(item, {
						styles: {
							"backgroundColor": background,
						},
						duration: 800, //ms  
						timingFunction: 'linear'
					});
				})
			},
			back_action(){
				uni.wen.toUrl(-2, 0, null);
			}
		}
	}
</script>

<style lang="scss" scoped>
	.ls_skeleton_wrap {
		width: 750rpx;
		
	}
	.ls_skeleton_box {

	}
	.ls_skeleton_box .common-page-width{
		width: $page-content-body-width;
		/* #ifndef APP-NVUE */
		margin: auto;
		/* #endif */
		/* #ifdef APP-NVUE */
		margin-left: 20rpx;
		margin-right: 20rpx;
		/* #endif */
	}
	
	.single-ls_line, .single-ls_line-lg,
	 .single-ls_card, .single-ls_card-lg,
	  .single-ls_circle, .single-ls_circle-lg,
	   .single-ls_square, .single-ls_square-lg{
		padding-bottom: 30rpx;
	}
	
	.single-ls_line-sm, .single-ls_card-sm, .single-ls_circle-sm, .single-ls_square-sm{
		padding-bottom: 20rpx;
	}
	
	.border {
		border-width: 1px;
		border-style: solid;
		border-color: #DD524D;
	}
	
	/* 骨架种类 start*/
	.ls_line-sm {
		height: 24rpx;
	}
	
	.ls_line {
		height: 32rpx;
	}
	
	.ls_line-lg {
		height: 48rpx;
	}
	
	.ls_card-sm {
		height: 100rpx;
	}
	
	.ls_card {
		height: 200rpx;
	}
	
	.ls_card-lg {
		height: 300rpx;
	}
	
	.ls_circle-sm {
		width: 50rpx;
		height: 50rpx;
		border-radius: 50rpx;
	}
	
	.ls_circle {
		width: 100rpx;
		height: 100rpx;
		border-radius: 100rpx;
	}
	
	.ls_circle-lg {
		width: 200rpx;
		height: 200rpx;
		border-radius: 200rpx;
	}
	
	.ls_square-sm {
		width: 50rpx;
		height: 50rpx;
	}
	
	.ls_square {
		width: 100rpx;
		height: 100rpx;
	}
	
	.ls_square-lg {
		width: 200rpx;
		height: 200rpx;
	}
	.ls_skeleton_space_inner{

	}
	.ls_skeleton_post_gap{
		width: 750rpx;
		height: $uni-spacing-col-base;

	}
	.ls_skeleton_page_gap{
		width: 750rpx;
		height: $uni-spacing-col-base;
	}
	/* 骨架种类 end*/
	
	/* 辅助样式 under */
	.ls_skeleton-group {
		/* #ifndef APP-NVUE */
		display: flex;
		/* #endif */
		flex-direction: row;
		align-items: center;
		/* margin-bottom: 30rpx; */
		// @include background_color(page-box-background-color);
		width: $page-content-body-width;
		/* #ifndef APP-NVUE */
		margin: auto;
		/* #endif */
		/* #ifdef APP-NVUE */
		margin-left: 20rpx;
		margin-right: 20rpx;
		/* #endif */
		.ls_line-sm {
			height: 24rpx;
			margin-bottom: 20rpx;
		}
		
		.ls_line {
			height: 32rpx;
			margin-bottom: 30rpx;
		}
		
		.ls_line-lg {
			height: 48rpx;
			margin-bottom: 30rpx;
		}
		
		.ls_card-sm {
			height: 100rpx;
			margin-bottom: 20rpx;
		}
		
		.ls_card {
			height: 200rpx;
			margin-bottom: 30rpx;
		}
		
		.ls_card-lg {
			height: 300rpx;
			margin-bottom: 30rpx;
		}
		
		.ls_circle-sm {
			width: 50rpx;
			height: 50rpx;
			border-radius: 50rpx;
			margin-bottom: 20rpx;
		}
		
		.ls_circle {
			width: 100rpx;
			height: 100rpx;
			border-radius: 100rpx;
			margin-bottom: 30rpx;
		}
		
		.ls_circle-lg {
			width: 200rpx;
			height: 200rpx;
			border-radius: 200rpx;
			margin-bottom: 30rpx;
		}
		
		.ls_square-sm {
			width: 50rpx;
			height: 50rpx;
			margin-bottom: 20rpx;
		}
		
		.ls_square {
			width: 100rpx;
			height: 100rpx;
			margin-bottom: 30rpx;
		}
		
		.ls_square-lg {
			width: 200rpx;
			height: 200rpx;
			margin-bottom: 30rpx;
		}
	}
	.ls_flex-sub {
		flex: 1;
	}
	
	.ls_round {
		border-radius: 48rpx;
	}
	
	.ls_radius {
		border-radius: 8rpx;
	}
	.ls_ml {
		margin-left: 20rpx;
	}
	
	.ls_animation {
		background-color: #e6e6e6;
		/* #ifndef APP-NVUE */
		animation-name: twinkle;
		animation-timing-function: inherit;
		animation-duration: 1.8s;
		animation-iteration-count: infinite;
		/* #endif */
	}
	.ls_animation_black{
		background-color: #27262c;
		/* #ifndef APP-NVUE */
		animation-name: twinkle-black;
		animation-timing-function: inherit;
		animation-duration: 1.8s;
		animation-iteration-count: infinite;
		/* #endif */
	}
	
	.ls_static {
		@include background_color(page-gray-background-color);
	}
	
	/* #ifndef APP-NVUE */
	
	@keyframes twinkle-black {
		0% {
			background-color: #27262c;
		}
	
		50% {
			background-color: #1c1c1c;
		}
	
		100% {
			background-color: #27262c;
		}
	}
	@keyframes twinkle {
		0% {
			background-color: #f7f7f7;
		}
	
		50% {
			background-color: #f6f6f6;
		}
	
		100% {
			background-color: #f7f7f7;
		}
	}
	
	/* #endif */
	
	/* 扩展模板news样式 */
	.ls_news {
		flex: 1;
		margin-left: 20rpx;
	}
	
	.ls_news_img {
		width: 240rpx;
		height: 200rpx;
		margin-bottom: 30rpx;
	}
	
	.ls_news_user {
		height: 32rpx;
		margin-bottom: 30rpx;
		width: 260rpx;
	}
	
	.ls_news_time {
		height: 32rpx;
		margin-bottom: 30rpx;
		width: 130rpx;
	}
	
	/* #ifdef H5 */
	.hasRefreshData-tip{
			background: #f0f9eb;
			border: 4rpx solid #e1f3d8;
			color: #67c23a;
			font-size: $uni-font-size-sm;
			text-align: center;
			padding: 10rpx 0;
			/* #ifndef APP-NVUE */
			margin: 6rpx auto;
			/* #endif */
			/* #ifdef APP-NVUE */
			margin-top: 6rpx;
			margin-left: 20rpx;
			margin-right: 20rpx;
			margin-bottom: 6rpx;
			/* #endif */
			display: block;
	}
	/* #endif */
	.fake-header{
		@include background_color(page-box-background-color);
		/* #ifdef APP */
		padding-top: 20px;
		/* #endif */
		/* #ifdef MP */
		padding-top: 47px;
		/* #endif */
		
		padding-bottom: 4px;
		width: 750rpx;
		/* #ifdef H5 || APP */
		height: 40px;
		/* #endif */
		/* #ifdef MP */
		height: 40px;
		/* #endif */
	}
	.ls_skeleton_wrap.scene_90750{
		padding: 0!important;
		.common-page-width{
			width: 750rpx;
		}
	}
	.ls_skeleton_wrap.scene_90730{
		.common-page-width{
			width: 730rpx;
		}
		.ls_skeleton-group{
			width: 730rpx;
		}
		.ls_ml{
			margin-left: 15rpx;
		}
	}
	
	.ls_skeleton_wrap.scene_90734{
		.common-page-width{
			width: 734rpx;
		}
		.ls_skeleton-group{
			width: 734rpx;
		}
		.ls_ml{
			margin-left: 8rpx;
		}
	}
	
	
</style>
